!<arch>
0-isupper.c/    0           0     0     644     232       `
#include "main.h"

/**
 *  * _isupper - check the code for Holberton School students.
 *   *
 *    * @c: is an integer param
 *     *
 *      * Return: Always 0.
 *       */


int _isupper(int c)
{

		return (c >= 65 && c <= 90);
}
0-memset.c/     0           0     0     644     310       `
#include "main.h"

/**
 *  * _memset - ironnou
 *   * @s: pointer to char params
 *    * @b: data to change
 *     * @n: index
 *      * Return: *s
 *       */

char *_memset(char *s, char b, unsigned int n)
{
		unsigned int i;

			for (i = 0; i < n; i++)
					{
								s[i] = b;
									}
				return (s);
}
0-strcat.c/     0           0     0     644     526       `
#include "main.h"

/**
 *  * *_strcat - function commute srtings
 *   * @dest: param pointer to a char
 *    * @src: param pointer to a char
 *     * Return: return value of dest
 *      */

char *_strcat(char *dest, char *src)
{
		int i;
			int j;

				i = 0;
					j = 0;

						while (dest[i] != '\0')
								{
											i++;
												}

							while (src[j] != '\0')
									{
												dest[i] = src[j];
														j++;
																i++;
																	}

								dest[i] = '\0';
									return (dest);
}
1-isdigit.c/    0           0     0     644     232       `
#include "main.h"

/**
 *  * _isdigit - check the code for Holberton School students.
 *   *
 *    * @c: is an integer param
 *     *
 *      * Return: Always 0.
 *       */


int _isdigit(int c)
{

		return (c >= 48 && c <= 57);
}
1-memcpy.c/     0           0     0     644     345       `
#include "main.h"
/**
 *  *_memcpy - copies memory area
 *   *
 *    *@dest:destination
 *     *@src:source
 *      *@n:no. of bytes
 *       *Return:pointer to dest
 *        */
char *_memcpy(char *dest, char *src, unsigned int n)
{
		unsigned int i;

			for (i = 0; i < n; i++)
					{
								dest[i] = src[i];
									}
				return (dest);
}

1-strncat.c/    0           0     0     644     487       `
#include "main.h"
/**
 *  *_strncat - concantenates two strings
 *   *
 *    *@dest:destination
 *     *@src:source
 *      *@n:no. of bytes
 *       *
 *        *Return:pointer to dest
 *         */
char *_strncat(char *dest, char *src, int n)
{
		int i, length, j;

			for (i = 0; dest[i] != '\0'; i++)
					{
								length++;
									}

				for (j = 0; src[j] != '\0' && j < n; j++)
						{
									dest[i + j] = src[j];
										}
					dest[i + j] = '\0';
						return (dest);
}

100-atoi.c/     0           0     0     644     697       `
#include "main.h"
#include <stdio.h>
/**
 *  *_atoi - converts a string to an integer
 *   *
 *    *@s: string
 *     *
 *      *Return:integer 0 - no int
 *       */
int _atoi(char *s)
{
		int sign = 0;
			unsigned int num = 0;

				while (*s != '\0')
						{
									if (*s == '-')
												{
																sign++;
																		}
											if (*s >= '0' && *s <= '9')
														{
																		num = (num * 10) + (*s - '0');
																				}
													if (*s == ';')
																{
																				break;
																						}
															s++;
																}
					if (sign % 2 != 0)
							{
										return (-num);
											}
						return (num);
}

2-strchr.c/     0           0     0     644     454       `
#include "main.h"
/**
 *  *_strchr - locates a character in a string
 *   *
 *    *@s:address to string
 *     *@c:to search for
 *      *
 *       *Return:pointer to first occurrence of char c
 *        *
 *         */
char *_strchr(char *s, char c)
{
		while (*s != '\0')
				{
							if (*s == c)
										{
														return (s);
																}
									s++;
										}
			if (*s == c)
					{
								return (s);
									}
				return (0);
}
2-strlen.c/     0           0     0     644     291       `
#include "main.h"
/**
 *  *_strlen - returns length of string
 *   *
 *    *Return:length of string
 *     *
 *      *@s:input
 *       *
 *        */
int _strlen(char *s)
{
		int length = 0;

			while (*s != '\0')
					{
								length++;
										s++;
											}
				return (length);
}

2-strncpy.c/    0           0     0     644     422       `
#include "main.h"
/**
 *  *_strncpy - copies a string
 *   *
 *    *@dest:destination
 *     *@src:source
 *      *@n:range
 *       *
 *        *Return:dest
 *         *
 *          */
char *_strncpy(char *dest, char *src, int n)
{
		int i;

			for (i = 0; src[i] != '\0' && i < n; i++)
					{
								dest[i] = src[i];
									}
				for (; i < n; i++)
						{
									dest[i] = '\0';
										}
					return (dest);
}
3-islower.c/    0           0     0     644     351       `
#include "main.h"
/**
 *  *_islower - checks for lowercase characters
 *   *
 *    *Description: checks for lowercase
 *     *
 *      *Return:  1 - l0wercase 0 - otherwise
 *       *
 *        *@c:input
 *         */
int _islower(int c)
{
		if (c >= 'a' && c <= 'z')
				{
							return (1);
								}
			else
					{
								return (0);
									}
}

3-puts.c/       0           0     0     644     287       `
#include "main.h"
/**
 *  *_puts - prints a string + newline
 *   *
 *    *@str:input
 *     *
 *      *Return:void
 *       *
 *        */
void _puts(char *str)
{
		int i = 0;

			while (str[i] != '\0')
					{
								_putchar(str[i]);
										i++;
											}
				_putchar('\n');
}

3-strcmp.c/     0           0     0     644     426       `
#include "main.h"
/**
 *  *_strcmp - compares two strings
 *   *
 *    *@s1:string 1
 *     *@s2:string 2
 *      *
 *       *Return:0- same,-ve - less ,+ve -more
 *        */
int _strcmp(char *s1, char *s2)
{
		while ((*s1 != '\0' && *s2 != '\0') && *s1 == *s2)
				{
							s1++;
									s2++;
										}
			if (*s1 == *s2)
					{
								return (0);
									}
				else
						{
									return (*s1 - *s2);
										}
}
3-strspn.c/     0           0     0     644     684       `
#include "main.h"
/**
 *  *_strspn - gets the length of a prefix substring
 *   *
 *    *@s:string
 *     *@accept:bytes
 *      *
 *       *Return:unsigned int
 *        *
 *         */
unsigned int _strspn(char *s, char *accept)
{
		unsigned int i = 0;
			char *t = accept;

				while (*s++)
						{
									while (*accept++)
												{
																if (*(s - 1) == *(accept - 1))
																				{
																									i++;
																													break;
																																}
																		}
											if (!(*--accept))
														{
																		break;
																				}
													accept = t;
														}
					return (i);
}
4-isalpha.c/    0           0     0     644     401       `
#include "main.h"
/**
 *  *_isalpha - checks for alphabetic characters
 *   *
 *    *Description: checks for alpha
 *     *
 *      *Return: 1 - alphabetic character 0 - otherwise
 *       *
 *        *@c:input.
 *         *
 *          */
int _isalpha(int c)
{
		if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
				{
							return (1);
								}
			else
					{
								return (0);
									}
}

4-strpbrk.c/    0           0     0     644     543       `
#include "main.h"
/**
 *  *_strpbrk - locates the first occurrence of string s in string
 *   *accept
 *    *
 *     *@s:string scanned
 *      *@accept:test
 *       *
 *        *Return:pointer to byte in s
 *         *
 *          */
char *_strpbrk(char *s, char *accept)
{
		int i;

			while (*s)
					{
								for (i = 0; accept[i]; i++)
											{
															if (*s == accept[i])
																			{
																								return (s);
																											}
																	}
										s++;
											}
				return (0);
}

5-strstr.c/     0           0     0     644     766       `
#include "main.h"
/**
 *  *_strstr - locates a substring
 *   *
 *    *@haystack:string scanned
 *     *@needle:substring to look for
 *      *
 *       *Return:pointer to beginning of substring,NULl instead
 *        */
char *_strstr(char *haystack, char *needle)
{
		char *scanned = haystack;
			char *sub = needle;

				while (*haystack)
						{
									while (*needle)
												{
																if (*haystack++ != *needle++)
																				{
																									break;
																												}
																		}
											if (!*needle)
														{
																		return (scanned);
																				}
													needle = sub;
															scanned++;
																	haystack = scanned;
																		}
					return (0);
}
6-abs.c/        0           0     0     644     410       `
#include "main.h"
/**
 *  *_abs - computes absolute value of an integer
 *   *
 *    *Description:absolute value
 *     *
 *      *Return: absolute value of int
 *       *
 *        *@n:input
 *         *
 *          */
int _abs(int n)
{
		if (n > 0)
				{
							n = n;
								}
			else if (n < 0)
					{
								n = -n;
									}
				else if (n == 0)
						{
									n = 0;
										}
					return (n);
}
9-strcpy.c/     0           0     0     644     350       `
#include "main.h"
/**
 *  **_strcpy - copies string pointed to by src
 *   *@dest:destination
 *    *@src:source
 *     *
 *      *Return:pointer to dest
 *       *
 *        */
char *_strcpy(char *dest, char *src)
{
		int i;

			for (i = 0; src[i] != '\0'; i++)
					{
								dest[i] = src[i];
									}
				dest[i] = '\0';
					return (dest);

}
_putchar.c/     0           0     0     644     281       `
#include <unistd.h>

/**
 *  * _putchar - writes the character c to stdout
 *   * @c: The character to print
 *    *
 *     * Return: On success 1.
 *      * On error, -1 is returned, and errno is set appropriately.
 *       */
int _putchar(char c)
{
		return (write(1, &c, 1));
}

